buildscript {
    repositories {
        jcenter()
        maven {
            url uri('../repo')
        }
    }
    dependencies {
        classpath group: 'com.seven.weapon',
                name: 'packer',
                version: '0.0.1'
    }
}

plugins {
    id 'com.android.application'
}
apply plugin: 'auto-packer'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.hhb.ep21client"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.1.444444"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        ep21 {
            storeFile file("../platform_mtk.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.ep21
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
def common_version = "0.0.7"
dependencies {
    implementation files('libs/common-download-release.aar')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    //okhttp
    //implementation("com.squareup.okhttp3:okhttp:4.9.0")
    implementation("com.squareup.okhttp3:okhttp:3.12.1")

    implementation "com.abupdate.weaponry:common:$common_version"
    implementation "com.abupdate.weaponry:common-ui:$common_version"
    //implementation "com.abupdate.weaponry:common-download:$common_version"
    implementation "com.abupdate.weaponry:common-mqtt:$common_version"
    implementation 'com.adups.iot:iot_download_libs:1.1.10_1'
    implementation 'com.adups.iot:trace:1.0.4'
}

//获取本地local.properties中ftp账号密码
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

autoPack {
    def outputDirPath = "${project.getProjectDir()}/autoPack/"
    taskConfig {
        //设置禁止打包的ProductFlavor
        disableProductFlavors = ['Type2']
        //设置禁止打包的BuildType
        disableBuildTypes = ['debug']
    }
    packOutputConfig {
        //设置打包输出路径
        outputDir outputDirPath
        //是否压缩
        compress false
        //打包其他的文件
        otherFiles = ["${project.getProjectDir()}/ReleaseNote.txt"]
        //对APK文件进行重命名
        renameApkFile { project, variant ->
            project.name + '_' + variant.name + '_' + variant.versionName + '.apk'
        }
        //命名打包目录的文件夹，若不设置，默认为APK的文件名
        packDirName { project ->
            project.name
        }
    }
    uploadFtpConfig {
        uploadFtp true
        serverIp "172.18.6.133"
        serverPort "21"
        userName properties.getProperty("ftp.userName")
        passWord properties.getProperty("ftp.PassWord")
        uploadFtpPath "\\autoPackage\\"
        localPaths = ["${project.getProjectDir()}/ReleaseNote.txt", outputDirPath + project.name + '/ep21client_release_1.1.444444.apk']
    }

    emailTemplateConfig {
        templateConfig true
        projectName project.name
        releaseNoteLocalPath "${project.getProjectDir()}/ReleaseNote.txt"
    }
}